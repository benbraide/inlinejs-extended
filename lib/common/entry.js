"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineJSExtended = void 0;
const inlinejs_1 = require("@benbraide/inlinejs");
const names_1 = require("./names");
const fetch_1 = require("./concepts/fetch");
const resource_1 = require("./concepts/resource");
const server_1 = require("./concepts/server");
const attr_1 = require("./directive/attr");
const intersection_1 = require("./directive/intersection");
const tick_1 = require("./directive/tick");
const form_1 = require("./directive/form");
const state_1 = require("./directive/state");
const overlay_1 = require("./directive/overlay");
const mouse_1 = require("./directive/mouse");
const keyboard_1 = require("./directive/keyboard");
const format_1 = require("./magic/format");
const fetch_2 = require("./magic/fetch");
const get_1 = require("./magic/get");
const resource_2 = require("./magic/resource");
const server_2 = require("./magic/server");
const wait_1 = require("./magic/wait");
const overlay_2 = require("./magic/overlay");
function InlineJSExtended() {
    (0, inlinejs_1.WaitForGlobal)().then(() => {
        (0, inlinejs_1.GetGlobal)().SetConcept(names_1.FetchConceptName, new fetch_1.FetchConcept());
        (0, inlinejs_1.GetGlobal)().SetConcept(names_1.ResourceConceptName, new resource_1.ResourceConcept());
        (0, inlinejs_1.GetGlobal)().SetConcept(names_1.ServerConceptName, new server_1.ServerConcept());
        (0, attr_1.AttrDirectiveHandlerCompact)();
        (0, intersection_1.IntersectionDirectiveHandlerCompact)();
        (0, tick_1.TickDirectiveHandlerCompact)();
        (0, form_1.FormDirectiveHandlerCompact)();
        (0, state_1.StateDirectiveHandlerCompact)();
        (0, overlay_1.OverlayDirectiveHandlerCompact)();
        (0, mouse_1.MouseDirectiveHandlerCompact)();
        (0, keyboard_1.KeyboardDirectiveHandlerCompact)();
        (0, format_1.FormatMagicHandlerCompact)();
        (0, fetch_2.FetchMagicHandlerCompact)();
        (0, get_1.GetMagicHandlerCompact)();
        (0, resource_2.ResourceMagicHandlerCompact)();
        (0, server_2.ServerMagicHandlerCompact)();
        (0, wait_1.WaitMagicHandlerCompact)();
        (0, overlay_2.OverlayMagicHandlerCompact)();
    });
}
exports.InlineJSExtended = InlineJSExtended;
